/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminVideosRouteImport } from './routes/admin/videos'
import { Route as AdminSettingsRouteImport } from './routes/admin/settings'
import { Route as AdminProductsRouteImport } from './routes/admin/products'
import { Route as AdminPricingRouteImport } from './routes/admin/pricing'

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminVideosRoute = AdminVideosRouteImport.update({
  id: '/videos',
  path: '/videos',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProductsRoute = AdminProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRoute,
} as any)
const AdminPricingRoute = AdminPricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/pricing': typeof AdminPricingRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/videos': typeof AdminVideosRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/pricing': typeof AdminPricingRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/videos': typeof AdminVideosRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/pricing': typeof AdminPricingRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/videos': typeof AdminVideosRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/pricing'
    | '/admin/products'
    | '/admin/settings'
    | '/admin/videos'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/pricing'
    | '/admin/products'
    | '/admin/settings'
    | '/admin/videos'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/pricing'
    | '/admin/products'
    | '/admin/settings'
    | '/admin/videos'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/videos': {
      id: '/admin/videos'
      path: '/videos'
      fullPath: '/admin/videos'
      preLoaderRoute: typeof AdminVideosRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/pricing': {
      id: '/admin/pricing'
      path: '/pricing'
      fullPath: '/admin/pricing'
      preLoaderRoute: typeof AdminPricingRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminPricingRoute: typeof AdminPricingRoute
  AdminProductsRoute: typeof AdminProductsRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminVideosRoute: typeof AdminVideosRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminPricingRoute: AdminPricingRoute,
  AdminProductsRoute: AdminProductsRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminVideosRoute: AdminVideosRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
