/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as VideosSplatRouteImport } from './routes/videos/$'
import { Route as AdminVideosRouteImport } from './routes/admin/videos'
import { Route as AdminSettingsRouteImport } from './routes/admin/settings'
import { Route as AdminPricingRouteImport } from './routes/admin/pricing'
import { Route as AdminVideosIndexRouteImport } from './routes/admin/videos.index'
import { Route as AdminProductsIndexRouteImport } from './routes/admin/products.index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as AdminVideosGeneracijaRouteImport } from './routes/admin/videos.generacija'
import { Route as AdminProductsNewRouteImport } from './routes/admin/products.new'
import { Route as AdminProductsIdRouteImport } from './routes/admin/products.$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const VideosSplatRoute = VideosSplatRouteImport.update({
  id: '/videos/$',
  path: '/videos/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminVideosRoute = AdminVideosRouteImport.update({
  id: '/videos',
  path: '/videos',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminPricingRoute = AdminPricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => AdminRoute,
} as any)
const AdminVideosIndexRoute = AdminVideosIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminVideosRoute,
} as any)
const AdminProductsIndexRoute = AdminProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AdminRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminVideosGeneracijaRoute = AdminVideosGeneracijaRouteImport.update({
  id: '/generacija',
  path: '/generacija',
  getParentRoute: () => AdminVideosRoute,
} as any)
const AdminProductsNewRoute = AdminProductsNewRouteImport.update({
  id: '/products/new',
  path: '/products/new',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProductsIdRoute = AdminProductsIdRouteImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/pricing': typeof AdminPricingRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/videos': typeof AdminVideosRouteWithChildren
  '/videos/$': typeof VideosSplatRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/products/$id': typeof AdminProductsIdRoute
  '/admin/products/new': typeof AdminProductsNewRoute
  '/admin/videos/generacija': typeof AdminVideosGeneracijaRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/videos/': typeof AdminVideosIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/login': typeof LoginRoute
  '/admin/pricing': typeof AdminPricingRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/videos/$': typeof VideosSplatRoute
  '/admin': typeof AdminIndexRoute
  '/admin/products/$id': typeof AdminProductsIdRoute
  '/admin/products/new': typeof AdminProductsNewRoute
  '/admin/videos/generacija': typeof AdminVideosGeneracijaRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/videos': typeof AdminVideosIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/pricing': typeof AdminPricingRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/videos': typeof AdminVideosRouteWithChildren
  '/videos/$': typeof VideosSplatRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/products/$id': typeof AdminProductsIdRoute
  '/admin/products/new': typeof AdminProductsNewRoute
  '/admin/videos/generacija': typeof AdminVideosGeneracijaRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/admin/videos/': typeof AdminVideosIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/admin'
    | '/login'
    | '/admin/pricing'
    | '/admin/settings'
    | '/admin/videos'
    | '/videos/$'
    | '/admin/'
    | '/admin/products/$id'
    | '/admin/products/new'
    | '/admin/videos/generacija'
    | '/api/auth/$'
    | '/admin/products'
    | '/admin/videos/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/login'
    | '/admin/pricing'
    | '/admin/settings'
    | '/videos/$'
    | '/admin'
    | '/admin/products/$id'
    | '/admin/products/new'
    | '/admin/videos/generacija'
    | '/api/auth/$'
    | '/admin/products'
    | '/admin/videos'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/admin'
    | '/login'
    | '/admin/pricing'
    | '/admin/settings'
    | '/admin/videos'
    | '/videos/$'
    | '/admin/'
    | '/admin/products/$id'
    | '/admin/products/new'
    | '/admin/videos/generacija'
    | '/api/auth/$'
    | '/admin/products/'
    | '/admin/videos/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
  VideosSplatRoute: typeof VideosSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/videos/$': {
      id: '/videos/$'
      path: '/videos/$'
      fullPath: '/videos/$'
      preLoaderRoute: typeof VideosSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/videos': {
      id: '/admin/videos'
      path: '/videos'
      fullPath: '/admin/videos'
      preLoaderRoute: typeof AdminVideosRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/pricing': {
      id: '/admin/pricing'
      path: '/pricing'
      fullPath: '/admin/pricing'
      preLoaderRoute: typeof AdminPricingRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/videos/': {
      id: '/admin/videos/'
      path: '/'
      fullPath: '/admin/videos/'
      preLoaderRoute: typeof AdminVideosIndexRouteImport
      parentRoute: typeof AdminVideosRoute
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/videos/generacija': {
      id: '/admin/videos/generacija'
      path: '/generacija'
      fullPath: '/admin/videos/generacija'
      preLoaderRoute: typeof AdminVideosGeneracijaRouteImport
      parentRoute: typeof AdminVideosRoute
    }
    '/admin/products/new': {
      id: '/admin/products/new'
      path: '/products/new'
      fullPath: '/admin/products/new'
      preLoaderRoute: typeof AdminProductsNewRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/products/$id': {
      id: '/admin/products/$id'
      path: '/products/$id'
      fullPath: '/admin/products/$id'
      preLoaderRoute: typeof AdminProductsIdRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminVideosRouteChildren {
  AdminVideosGeneracijaRoute: typeof AdminVideosGeneracijaRoute
  AdminVideosIndexRoute: typeof AdminVideosIndexRoute
}

const AdminVideosRouteChildren: AdminVideosRouteChildren = {
  AdminVideosGeneracijaRoute: AdminVideosGeneracijaRoute,
  AdminVideosIndexRoute: AdminVideosIndexRoute,
}

const AdminVideosRouteWithChildren = AdminVideosRoute._addFileChildren(
  AdminVideosRouteChildren,
)

interface AdminRouteChildren {
  AdminPricingRoute: typeof AdminPricingRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminVideosRoute: typeof AdminVideosRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
  AdminProductsIdRoute: typeof AdminProductsIdRoute
  AdminProductsNewRoute: typeof AdminProductsNewRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminPricingRoute: AdminPricingRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminVideosRoute: AdminVideosRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
  AdminProductsIdRoute: AdminProductsIdRoute,
  AdminProductsNewRoute: AdminProductsNewRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
  VideosSplatRoute: VideosSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
